const h=`{% block heptacom_admin_open_auth_user_confirm %} <div class="heptacom-admin-open-auth-user-confirm-login"> <mt-loader v-if="loading"></mt-loader> <template v-else> <mt-loader v-if="waitingForConfirmation"></mt-loader> <sw-card-section class="heptacom-admin-open-auth-user-confirm-login--clients" :divider="sectionDivider" v-if="clients.length > 0" > <mt-banner v-if="popupsAreBlocked" variant="attention" > {{ $tc('heptacom-admin-open-auth-user-confirm-login.popupsBlocked') }} </mt-banner> <template v-for="client of clients" :key="client.id" > <mt-button block variant="secondary" @click="startAuthFlow(client)" > {{ $t('heptacom-admin-open-auth-user-confirm-login.confirmWith', { 'clientName': client.name }) }} <mt-icon name="regular-external-link-s" size="16px" ></mt-icon> </mt-button> </template> </sw-card-section> </template> </div> {% endblock %}`,{Component:p,Context:a}=Shopware,c="HeptacomAdminOpenAuthConfirmState",m={template:h,inject:["loginService","repositoryFactory"],props:{divider:{type:Boolean,default:!0}},data(){return{loading:!0,clients:[],waitingForConfirmation:!1,confirmationClient:null,popupsAreBlocked:null}},computed:{heptacomAdminOpenAuthClientsRepository(){return this.repositoryFactory.create("heptacom_admin_open_auth_client")},httpClient(){return this.heptacomAdminOpenAuthClientsRepository.httpClient},sectionDivider(){return this.divider?"bottom":""}},created(){this.createdComponent()},methods:{createdComponent(){this.loadClients()},loadClients(){this.loading=!0,this.clients=[],this.getConnectedClients().then(t=>{this.clients=t}).finally(()=>{this.loading=!1})},startAuthFlow(t){const e=this;this.waitingForConfirmation=!0,this.popupsAreBlocked=null,this.confirmationClient=t,localStorage.removeItem(c),this.getConfirmRedirectUrl(t.id).then(i=>{const r=Math.floor((screen.width-600)/2),d=Math.floor((screen.height-600)/2),n=window.open(i,this.$t("heptacom-admin-open-auth-user-confirm-login.confirmWith",{clientName:t.name}),`location=0,status=0,width=600,height=600, top=${d}, left=${r}`);let o=null;const s=window.setTimeout(()=>{(!n||n.closed||typeof n.closed>"u")&&(e.popupsAreBlocked=!0,e.waitingForConfirmation=!1,o&&window.clearInterval(o))},1200);try{n.focus(),e.popupsAreBlocked=!1}catch{e.popupsAreBlocked=!0,e.waitingForConfirmation=!1,window.clearTimeout(s);return}o=window.setInterval(()=>{if(!this.waitingForConfirmation){window.clearInterval(o),window.clearTimeout(s),this.popupsAreBlocked=!1,n.close();return}if(n.closed){window.clearInterval(o),window.clearTimeout(s),this.popupsAreBlocked=!1,this.waitingForConfirmation=!1;const l=localStorage.getItem(c);l&&this.verifyByState(JSON.parse(l).state)}},1e3)})},abortAuthFlow(){this.confirmationClient=null,this.waitingForConfirmation=!1},getConnectedClients(){const t=this.heptacomAdminOpenAuthClientsRepository.buildHeaders(a.api);return this.httpClient.get("/_admin/open-auth/client/list",{headers:t}).then(e=>e.data.data.filter(i=>i.connected))},getConfirmRedirectUrl(t){const e=this.heptacomAdminOpenAuthClientsRepository.buildHeaders(a.api);return this.httpClient.get(`/_admin/open-auth/${t}/confirm`,{headers:e}).then(i=>i.data.target)},verifyByState(t){this.httpClient.post("/oauth/token",{grant_type:"heptacom_admin_open_auth_one_time_token",client_id:"administration",scope:"user-verified",one_time_token:t},{baseURL:a.api.apiPath}).then(e=>{const i={...a.api};i.authToken.access=e.data.access_token;const r={...this.loginService.getBearerAuthentication(),access:i.authToken.access};this.loginService.setBearerAuthentication(r),this.$emit("confirm",i)})}}};export{m as default};
//# sourceMappingURL=index-CsOpz98K.js.map
