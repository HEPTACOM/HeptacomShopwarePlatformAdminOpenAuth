<style>
    .heptacom-admin-open-auth--button {
        -webkit-transition: all .15s ease-out;
        transition: all .15s ease-out;
        display: inline-grid;
        place-items: center;
        width: 100%;
        border-radius: var(--border-radius-button);
        padding: var(--scale-size-2) var(--scale-size-24);
        font-size: var(--font-size-xs);
        outline: none;
        font-weight: var(--font-weight-semibold);
        font-family: var(--font-family-body);
        white-space: nowrap;
        text-overflow: ellipsis;
        vertical-align: middle;
        text-decoration: none;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        position: relative;

        line-height: 1;

        background: transparent;
        border: 1px solid var(--color-border-brand-selected);
        border-color: var(--color-border-brand-selected);
        color: var(--color-text-brand-default);

        min-height: 32px;
    }

    .heptacom-admin-open-auth--button span {
        display: grid;
        grid-auto-flow: column;
        -webkit-box-align: center;
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-column-gap: var(--scale-size-8);
        -moz-column-gap: var(--scale-size-8);
        column-gap: var(--scale-size-8);
    }

    .heptacom-admin-open-auth--button:first-of-type {
        margin-top: var(--scale-size-32);
    }

    .sw-inactivity-login__modal .heptacom-admin-open-auth--button:last-of-type {
        margin-bottom: var(--scale-size-32);
    }

    .heptacom-admin-open-auth--separator {
        margin-top: var(--scale-size-32);
        border-color: #52667a;
    }

    .heptacom-admin-open-auth--button:focus {
        background-color: #e3f3ff;
        border-color: var(--color-border-brand-selected);
        -webkit-box-shadow: 0 0 4px 0 rgba(24,158,255,.3);
        box-shadow: 0 0 4px #189eff4d;
    }

    {% if heptacom_admin_auth_config('denyPasswordLogin') %}
        .sw-login-login > :not(.sw-login__content-headline),
        .sw-inactivity-login__modal .sw-modal__body .mt-password-field,
        .sw-inactivity-login__modal .sw-modal__body .mt-field--checkbox__container,
        .sw-inactivity-login__modal .sw-modal__footer .mt-button {
            display: none;
        }
    {% endif %}
</style>
<script{% if cspNonce is defined %} nonce="{{ cspNonce }}" {% endif %}>
    // Ensure we have access to the Vue component of a DOM node
    (function () {
        const DomNodeToComponent = {
            install: (Vue, options) => {
                Vue.mixin({
                    mounted () {
                        if (
                            !(this.$el instanceof HTMLElement)
                            || !this.$el.classList.contains('sw-inactivity-login')
                        ) {
                            return;
                        }

                        this.$el.__hcInactivityLoginComponent__ = this
                    },
                })
            },
        };

        let domComponentInstallRunning = false;

        const domComponentInstall = window.setInterval(() => {
            if (domComponentInstallRunning) {
                return;
            }

            try {
                domComponentInstallRunning = true;

                if (
                    window.Shopware === undefined
                    || Shopware.Application === undefined
                    || Shopware.Application.view === undefined
                    || Shopware.Application.view === null
                ) {
                    return;
                }

                Shopware.Application.view.app.use(DomNodeToComponent);
                clearInterval(domComponentInstall);
            } finally {
                domComponentInstallRunning = false;
            }
        }, 50);
    })();

    // Launch listener for login and inactivity routes
    (function () {
        const SSO_SHOPWARE_SETTINGS = {
            disablePasswordLogin: {{ heptacom_admin_auth_config('denyPasswordLogin') ? 'true' : 'false' }},
            autoRedirect: {{ heptacom_admin_auth_config('enableAutoRedirect') ? 'true' : 'false' }},
        };

        class SsoError extends Error {
            constructor(message) {
                super(`[HEPTACOM Admin Open Auth] ${message}`);
            }
        }

        async function getClientRoutes() {
            const clientRoutes = {{ url('administration.heptacom.admin_open_auth.routes')|json_encode|raw }};

            const result = await fetch(clientRoutes);
            return await result.json();
        }

        function getSsoState() {
            return new URLSearchParams(window.location.search).get('state');
        }

        async function checkLogin(redirectHandler) {
            const token = getSsoState();

            if (!token) {
                return;
            }

            const loginService = await getShopwareService('loginService');
            const httpClient = (await getShopwareService('userService')).client;

            const response = await httpClient.post('/oauth/token', {
                grant_type: 'heptacom_admin_open_auth_one_time_token',
                client_id: 'administration',
                scopes: 'write',
                one_time_token: token
            }, {
                baseURL: Shopware.Context.api.apiPath
            });

            loginService.setBearerAuthentication({
                access: response.data.access_token,
                refresh: response.data.refresh_token,
                expiry: response.data.expires_in
            });

            redirectHandler();
        }

        async function getShopwareService(serviceName, timeout = 10000) {
            const startTime = Date.now();

            let service = Shopware.Service().get(serviceName);

            while (service === undefined || service === null) {
                await new Promise(resolve => setTimeout(resolve, 100));
                service = Shopware.Service().get(serviceName);

                if (Date.now() - startTime > timeout) {
                    throw new SsoError(`Service "${serviceName}" could not be retrieved within ${timeout}ms.`);
                }
            }

            return service;
        }

        function handleAutoRedirect(clients) {
            // only redirect if password login is disabled and auto redirect is enabled
            if (!SSO_SHOPWARE_SETTINGS.disablePasswordLogin || !SSO_SHOPWARE_SETTINGS.autoRedirect) {
                return;
            }

            // only redirect if there is exactly one client
            if (clients.length !== 1) {
                return;
            }

            // prevent endless redirect loop
            if (getSsoState() !== null) {
                return;
            }

            // redirect to idp
            const client = clients[0];
            window.location.href = client.url;
        }

        function createButton(title, url) {
            const link = document.createElement('a');
            link.classList.add('heptacom-admin-open-auth--button');
            link.href = addRedirectToUrl(url);

            const content = document.createElement('span');
            content.innerText = title;

            link.appendChild(content);
            return link;
        }

        function handleLoginRoute() {
            // add login buttons
            getClientRoutes().then((data) => {
                const container = document.querySelector('.sw-login__content');

                if (!container) {
                    console.warn('Login modal does not exist anymore.');
                    return;
                }

                // add redirectTo to urls
                data.clients = data.clients.map((client) => ({
                    ...client,
                    url: addRedirectToUrl(client.url),
                }));

                // initiate auto redirect
                handleAutoRedirect(data.clients);

                // add login buttons
                data.clients.forEach(function (item) {
                    container.appendChild(createButton(item.name, item.url));
                });
            });

            // check for login token
            checkLogin(() => {
                window.location = window.location.origin + window.location.pathname;
            }).then();
        }

        function handleInactivityRoute() {
            const container = document.querySelector('.sw-inactivity-login');
            if (!container || !container.__hcInactivityLoginComponent__) {
                console.error('Could not find inactivity login container.');
                return;
            }

            const inactivityLogin = container.__hcInactivityLoginComponent__;
            inactivityLogin.isLoading = true;

            // add login buttons
            getClientRoutes()
                .then((data) => {
                    const container = document.querySelector('.sw-inactivity-login__modal .sw-modal__body');

                    if (!container) {
                        console.warn('Inactivity modal does not exist anymore.');
                        return;
                    }

                    if (container.hasAttribute('data-heptacom-sso-initialized')) {
                        console.warn('Inactivity modal already initialized with SSO IDPs.');
                        return;
                    } else {
                        container.setAttribute('data-heptacom-sso-initialized', 'true');
                    }

                    // add redirectTo to urls
                    data.clients = data.clients.map((client) => ({
                        ...client,
                        url: addRedirectToUrl(client.url),
                    }));

                    // initiate auto redirect
                    handleAutoRedirect(data.clients);

                    // add spacer between password login and sso login
                    if (!SSO_SHOPWARE_SETTINGS.disablePasswordLogin) {
                        const separator = document.createElement('hr');
                        separator.classList.add('heptacom-admin-open-auth--separator');
                        container.appendChild(separator);
                    }

                    // add login buttons
                    data.clients.forEach(function (item) {
                        container.appendChild(createButton(item.name, item.url));
                    });
                })
                .finally(() => inactivityLogin.isLoading = false);

            // check for login token
            checkLogin(() => {
                // complete login
                inactivityLogin.handleLoginSuccess();

                // dump query string
                removeStateFromUrl();
            }).then();
        }

        /**
         * @param route {string}
         * @returns {string}
         */
        function addRedirectToUrl(route) {
            const url = new URL(route);
            url.searchParams.set('redirectTo', window.location.pathname + window.location.search + window.location.hash);

            return url.toString();
        }

        function removeStateFromUrl() {
            const currentUrl = new URL(window.location.href);
            if (currentUrl.searchParams.has('state')) {
                currentUrl.searchParams.delete('state');
                window.location.href = currentUrl.toString();
            }
        }

        const paths = [
            {
                path: /^#\/login\/?$/,
                requiredElement: '.sw-login',
                handler: () => handleLoginRoute()
            },
            {
                path: /^#\/inactivity\/login\/[a-z0-9]{32}\/?$/,
                requiredElement: '.sw-inactivity-login__modal .sw-modal__body',
                handler: () => handleInactivityRoute()
            },
        ];

        /** @type number|null */
        let waitForElementTimeout = null;

        function waitForElement(selector, handler) {
            waitForElementTimeout = null;

            const element = document.querySelector(selector);
            if (!element) {
                waitForElementTimeout = window.setTimeout(() => waitForElement(selector, handler), 200);
                return;
            }

            handler();
        }

        let lastPath = null;
        function handleEvent() {
            if (lastPath === window.location.hash) {
                return;
            }

            lastPath = window.location.hash;

            if (waitForElementTimeout !== null) {
                window.clearTimeout(waitForElementTimeout);
                waitForElementTimeout = null;
            }

            for (let path of paths) {
                if (path.path.test(window.location.hash)) {
                    waitForElement(path.requiredElement, path.handler);
                    return;
                }
            }
        }

        window.addEventListener('load', () => handleEvent());
        window.addEventListener('popstate', () => handleEvent());
        window.setInterval(() => handleEvent(), 500);
    })();
</script>
